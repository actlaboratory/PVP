name: Build and release for snapshot

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          lfs: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          architecture: x86
          python-version: 3.8

      - name: Install requirements
        run: |
          python -m pip install -r requirements.txt

      - name: Test
        run: |
          python -m unittest discover test

      - name: Build
        run: |
          python tools\build.py
          exit 1
        env:
          COMMIT_TIMESTAMP: ${{ github.event.head_commit.timestamp}}

      - name: Re-create the tag
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo
            const tagName = repo + "-latestcommit"
            try {
              // Fetch the release by its tag
              const { data: release } = await github.rest.repos.getReleaseByTag({ owner, repo, tag: tagName })
              // Delete the release if exists
              await github.rest.repos.deleteRelease({ owner, repo, release_id: release.id })
              console.log("deleted release");
            } catch(err) {
              if(err.status !== 404){
                throw err;
              }
              console.log('No release found for deletion');
            }
            try {
              await github.rest.git.deleteRef({owner, repo, ref: "tags/" + tagName})
              console.log("deleted tag");
            } catch(err) {
              console.log('Failed to delete tag'+err.message);
            }
            try {
              await github.rest.git.createRef({owner, repo, ref: "refs/tags/" + tagName, sha: context.sha})
              console.log("created tag");
            } catch(err) {
              console.log('Failed to create tag'+err.message);
            }

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: |
            ./${{ github.event.repository.name }}-*.zip
            ./${{ github.event.repository.name }}-*.json


  deploy:
    needs: build
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: ./

      - name: Deploy to GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.repository.name }}-latestcommit
          body: Automatic build from master branch
          files: |
            ./${{ github.event.repository.name }}-*.zip
            ./${{ github.event.repository.name }}-*.json

  error_notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ failure() }}
    steps:
      - name: Send GitHub Action trigger data to Slack workflow
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Github actions build failed! <${{ github.server_url }}/${{ github.repository }}|${{ github.event.repository.name }}>のビルドが失敗しました。\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|対象のrun>お確認し、対応着手時・完了後は、本チャンネルにて経緯を報告ください。"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WORKFLOW_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

